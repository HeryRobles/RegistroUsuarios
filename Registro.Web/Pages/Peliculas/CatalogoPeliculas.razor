@page "/Peliculas"
@using Registro.Web.Services
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<h3>Catálogo de Películas</h3>

@if (peliculas == null)
{
    <p>Cargando películas...</p>
}
else
{
    <div class="peliculas-container">
        @foreach (var pelicula in peliculas)
        {
            <div class="pelicula-card">
                <img src="@pelicula.ImagenUrl" alt="@pelicula.Titulo" class="pelicula-imagen" />
                <h4>@pelicula.Titulo</h4>
                <p>@pelicula.Sinopsis</p>
                <p>Calificación: @pelicula.Calificacion</p>

                <!-- Botones para usuarios autenticados -->
                @if (usuarioAutenticado)
                {
                    <!-- Botones para el rol "Cliente" -->
                    @if (usuarioRol == "Cliente")
                    {
                        <button @onclick="() => MostrarFormularioComentario(pelicula.IdPelicula)">Comentar</button>
                        <button @onclick="() => CalificarPelicula(pelicula.IdPelicula)">Calificar</button>
                    }

                    <!-- Botones para los roles "Supervisor", "Empleado" y "Administrador" -->
                    @if (usuarioRol == "Supervisor" || usuarioRol == "Empleado" || usuarioRol == "Administrador")
                    {
                        <button @onclick="() => EditarPelicula(pelicula.IdPelicula)">Editar</button>
                    }

                    <!-- Botones exclusivos para el rol "Administrador" -->
                    @if (usuarioRol == "Administrador")
                    {
                        <button @onclick="() => EliminarPelicula(pelicula.IdPelicula)">Eliminar</button>
                    }
                }
            </div>
        }
    </div>
}

<!-- Formulario para crear una nueva película -->
@if (mostrarFormularioCrear)
{
    <div class="formulario-crear">
        <h3>Crear Nueva Película</h3>
        <input @bind="nuevaPelicula.Titulo" placeholder="Título" />
        <input @bind="nuevaPelicula.Sinopsis" placeholder="Sinopsis" />
        <input @bind="nuevaPelicula.ImagenUrl" placeholder="URL de la imagen" />
        <input @bind="nuevaPelicula.Calificacion" placeholder="Calificación" />
        <button @onclick="CrearPelicula">Crear</button>
        <button @onclick="CancelarCreacion">Cancelar</button>
    </div>
}

<button @onclick="MostrarFormularioCrear">Agregar Película</button>

@code {
    private List<PeliculaDTO> peliculas;
    private bool usuarioAutenticado;
    private string usuarioRol;
    private bool mostrarFormularioCrear = false;
    private PeliculaDTO nuevaPelicula = new PeliculaDTO();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            usuarioAutenticado = authState.User.Identity.IsAuthenticated;
            usuarioRol = authState.User.Claims.FirstOrDefault(c => c.Type == "role")?.Value;

            peliculas = await Http.GetFromJsonAsync<List<PeliculaDTO>>("api/Pelicula/lista");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al cargar las películas: {ex.Message}");
        }
    }

    private void MostrarFormularioComentario(int idPelicula)
    {
        Navigation.NavigateTo($"/comentar/{idPelicula}");
    }

    private async Task CalificarPelicula(int idPelicula)
    {
        try
        {
            var calificacion = 5.0;
            var response = await Http.PostAsJsonAsync($"api/Pelicula/{idPelicula}/calificacion", calificacion);

            if (response.IsSuccessStatusCode)
            {
                var peliculaActualizada = await response.Content.ReadFromJsonAsync<PeliculaDTO>();
                var peliculaIndex = peliculas.FindIndex(p => p.IdPelicula == idPelicula);
                peliculas[peliculaIndex] = peliculaActualizada;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al calificar la película: {ex.Message}");
        }
    }

    private void EditarPelicula(int idPelicula)
    {
        Navigation.NavigateTo($"/editar-pelicula/{idPelicula}");
    }

    private async Task EliminarPelicula(int idPelicula)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Pelicula/{idPelicula}");

            if (response.IsSuccessStatusCode)
            {
                peliculas.RemoveAll(p => p.IdPelicula == idPelicula);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al eliminar la película: {ex.Message}");
        }
    }

    private void MostrarFormularioCrear()
    {
        mostrarFormularioCrear = true;
    }

    private async Task CrearPelicula()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/Pelicula/crear", nuevaPelicula);

            if (response.IsSuccessStatusCode)
            {
                var peliculaCreada = await response.Content.ReadFromJsonAsync<PeliculaDTO>();
                peliculas.Add(peliculaCreada);
                mostrarFormularioCrear = false;
                nuevaPelicula = new PeliculaDTO(); 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al crear la película: {ex.Message}");
        }
    }

    private void CancelarCreacion()
    {
        mostrarFormularioCrear = false;
        nuevaPelicula = new PeliculaDTO(); 
    }
}